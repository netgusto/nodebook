{"version":3,"sources":["Components/Notebook/worker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,GAAG,mBAAS,CAAT,EAAwB;AAChC,UAAO,CAAC,CAAC,IAAF,CAAO,MAAd;AACI,SAAK,MAAL;AAAa;AACT,QAAA,UAAU,CAAC,CAAC,CAAC,IAAF,CAAO,GAAR,CAAV;AACH;AAHL;AAKH,CAND;;AAQA,SAAS,mBAAT,CAA6B,GAA7B,EAA0C,IAA1C,EAAsD;AACjD,EAAA,WAAmB,CAAC;AACjB,IAAA,MAAM,EAAE,qBADS;AAEjB,IAAA,OAAO,EAAE;AACL,MAAA,GAAG,EAAH,GADK;AAEL,MAAA,IAAI,EAAJ;AAFK;AAFQ,GAAD,CAAnB;AAOJ;;AAED,SAAS,eAAT,GAAwB;AACnB,EAAA,WAAmB,CAAC;AACjB,IAAA,MAAM,EAAE;AADS,GAAD,CAAnB;AAGJ;;AAED,SAAS,UAAT,CAAoB,GAApB,EAA+B;AAC3B,SAAO,KAAK,CAAC,GAAD,EAAM;AACd,IAAA,MAAM,EAAE,MADM;AAEd,IAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX;AAFK,GAAN,CAAL,CAON,IAPM,CAOD,UAAA,GAAG,EAAG;AACR,QAAI,CAAC,GAAG,CAAC,IAAT,EAAe;AACX;AAEA,UAAI,cAAc,GAAG,IAArB;AACA,aAAO,GAAG,CAAC,IAAJ,GACF,IADE,CACG,UAAA,IAAI,EAAG;AACT,QAAA,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,GAAjB,CAAqB,UAAA,QAAQ,EAAG;AAEhC,cAAI,QAAQ,CAAC,IAAT,GAAgB,MAAhB,KAA2B,CAA/B,EAAkC;AAElC,cAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAb;AACA,cAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAhB,CAAZ;AACA,cAAM,MAAM,GAAG,GAAG,CAAC,WAAJ,CAAgB,IAAhB,CAAf;AACA,UAAA,cAAc,GAAI,MAAM,KAAK,GAAG,CAAC,MAAJ,GAAa,CAA1C;AACA,UAAA,mBAAmB,CAAC,GAAD,EAAM,IAAI,CAAC,IAAX,CAAnB;AACC,SATD;AAWA,eAAO;AAAE,UAAA,cAAc,EAAd;AAAF,SAAP;AACH,OAdE,CAAP;AAeH,KAnBD,MAmBO;AACH,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACnC,YAAM,MAAM,GAAG,GAAG,CAAC,IAAJ,CAAS,SAAT,EAAf;AACA,YAAM,OAAO,GAAG,IAAI,WAAJ,CAAgB,OAAhB,CAAhB;AACA,YAAI,cAAc,GAAG,IAArB;;AACA,YAAM,IAAI,GAAG,SAAP,IAAO,GAAK;AACd,UAAA,MAAM,CAAC,IAAP,GAAc,IAAd,CAAmB,gBAAoB;AAAA,gBAAjB,IAAiB,QAAjB,IAAiB;AAAA,gBAAX,KAAW,QAAX,KAAW;;AACnC,gBAAI,IAAJ,EAAU;AACN,cAAA,OAAO,CAAC;AAAE,gBAAA,cAAc,EAAd;AAAF,eAAD,CAAP;AACA;AACH;;AAED,YAAA,OAAO,CAAC,MAAR,CAAe,KAAf,EAAsB,KAAtB,CAA4B,IAA5B,EAAkC,GAAlC,CAAsC,UAAA,QAAQ,EAAG;AAE7C,kBAAI,QAAQ,CAAC,IAAT,GAAgB,MAAhB,KAA2B,CAA/B,EAAkC;AAElC,kBAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAb;AACA,kBAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,IAAhB,CAAZ;AACA,kBAAM,MAAM,GAAG,GAAG,CAAC,WAAJ,CAAgB,IAAhB,CAAf;AACA,cAAA,cAAc,GAAI,MAAM,KAAK,GAAG,CAAC,MAAJ,GAAa,CAA1C;AACA,cAAA,mBAAmB,CAAC,GAAD,EAAM,IAAI,CAAC,IAAX,CAAnB;AACH,aATD,EANmC,CAiBnC;;AACA,YAAA,IAAI;AACP,WAnBD;AAoBH,SArBD;;AAuBA,QAAA,IAAI;AACP,OA5BM,CAAP;AA6BH;AACJ,GA1DM,EA2DN,IA3DM,CA2DD,iBAAuB;AAAA,QAApB,cAAoB,SAApB,cAAoB;;AACzB,QAAI,CAAC,cAAL,EAAqB;AACjB,MAAA,mBAAmB,CAAC,KAAD,EAAQ,UAAR,CAAnB;AACH;;AAED,IAAA,mBAAmB,CAAC,eAAD,EAAkB,MAAlB,CAAnB;AACA,IAAA,eAAe;AAClB,GAlEM,EAmEN,KAnEM,CAmEA,UAAA,GAAG,EAAG;AACT,IAAA,mBAAmB,CAAC,+CAAD,EAAkD,QAAlD,CAAnB;AACA,IAAA,eAAe;AAClB,GAtEM,CAAP;AAuEH","file":"worker.ce29c418.map","sourceRoot":"../../src/frontend","sourcesContent":["onmessage = function(e: MessageEvent) {\n    switch(e.data.action) {\n        case 'exec': {\n            execAction(e.data.url);\n        }\n    }\n}\n\nfunction consoleLogIfRunning(msg: string, chan: string) {\n    (postMessage as any)({\n        action: 'consoleLogIfRunning',\n        payload: {\n            msg,\n            chan,\n        }\n    });\n}\n\nfunction notifyExecEnded() {\n    (postMessage as any)({\n        action: 'execEnded',\n    });\n}\n\nfunction execAction(url: string) {\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n    })\n    .then(res => {\n        if (!res.body) {\n            // response not streamable; use it in one piece\n\n            let hasLastNewLine = true;\n            return res.text()\n                .then(text => {\n                    text.split('\\n').map(jsonline => {\n        \n                    if (jsonline.trim().length === 0) return;\n\n                    const data = JSON.parse(jsonline);\n                    const txt = JSON.parse(data.data);\n                    const lastnl = txt.lastIndexOf('\\n');\n                    hasLastNewLine = (lastnl === txt.length - 1);\n                    consoleLogIfRunning(txt, data.chan);\n                    });\n\n                    return { hasLastNewLine };\n                });\n        } else {\n            return new Promise((resolve, reject) => {\n                const reader = res.body.getReader();\n                const decoder = new TextDecoder(\"utf-8\");\n                let hasLastNewLine = true;\n                const pump = () => {\n                    reader.read().then(({ done, value }) => {\n                        if (done) {\n                            resolve({ hasLastNewLine });\n                            return;\n                        }\n            \n                        decoder.decode(value).split('\\n').map(jsonline => {\n            \n                            if (jsonline.trim().length === 0) return;\n\n                            const data = JSON.parse(jsonline);\n                            const txt = JSON.parse(data.data);\n                            const lastnl = txt.lastIndexOf('\\n');\n                            hasLastNewLine = (lastnl === txt.length - 1);\n                            consoleLogIfRunning(txt, data.chan);\n                        });\n                        \n                        // Get the data and send it to the browser via the controller\n                        pump();\n                    });\n                }\n\n                pump();\n            });\n        }\n    })\n    .then(({ hasLastNewLine }) => {\n        if (!hasLastNewLine) {\n            consoleLogIfRunning('%\\n', 'forcednl');\n        }\n\n        consoleLogIfRunning('--- Done.\\n\\n', 'info');\n        notifyExecEnded();\n    })\n    .catch(err => {\n        consoleLogIfRunning('\\n--- An error occurred during execution.\\n\\n', 'stderr');\n        notifyExecEnded();\n    });\n}"]}