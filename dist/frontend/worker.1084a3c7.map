{"version":3,"sources":["Components/Notebook/worker.ts"],"names":[],"mappings":";AAQA,SAAS,EAAoB,EAAa,GACjB,YAAA,CACT,OAAA,sBACC,QAAA,CAAA,IAAA,EAEL,KAAA,KAKZ,SAAS,IACgB,YAAA,CACT,OAAA,cAIhB,SAAS,EAAW,GACT,OAAA,MAAM,EAAK,CACN,OAAA,OACC,QAAA,CACK,OAAA,mBACM,eAAA,sBAGvB,KAAK,SAAM,GACJ,GAAC,EAAI,KAoBE,OAAA,IAAI,QAAQ,SAAC,EAAS,GACnB,IAAA,EAAS,EAAI,KAAK,YAClB,EAAU,IAAI,YAAY,SAC5B,GAAiB,GACR,SAAP,IACK,EAAA,OAAO,KAAK,SAAoB,GAAjB,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,MACpB,EACQ,EAAA,CAAE,eAAF,KAIJ,EAAA,OAAO,GAAO,MAAM,MAAM,IAAI,SAAW,GAEzC,GAA2B,IAA3B,EAAS,OAAO,OAAhB,CAEE,IAAA,EAAO,KAAK,MAAM,GAClB,EAAM,KAAK,MAAM,EAAK,MACtB,EAAS,EAAI,YAAY,MACb,EAAA,IAAW,EAAI,OAAS,EACtB,EAAA,EAAK,EAAK,SAIlC,OAIR,KA5CA,IAAA,GAAiB,EACd,OAAA,EAAI,OACN,KAAK,SAAO,GAYF,OAXF,EAAA,MAAM,MAAM,IAAI,SAAW,GAE5B,GAA2B,IAA3B,EAAS,OAAO,OAAhB,CAEE,IAAA,EAAO,KAAK,MAAM,GAClB,EAAM,KAAK,MAAM,EAAK,MACtB,EAAS,EAAI,YAAY,MACb,EAAA,IAAW,EAAI,OAAS,EACtB,EAAA,EAAK,EAAK,SAGvB,CAAE,eAAF,OAkCtB,KAAK,SAAuB,GAApB,EAAA,gBAEmB,EAAA,MAAO,YAGX,EAAA,gBAAiB,QACrC,MAEH,MAAM,SAAM,GACW,EAAA,gDAAiD,UACrE,MA9FR,UAAY,SAAS,GACV,OAAA,EAAE,KAAK,QACL,IAAA,OACU,EAAA,EAAE,KAAK","file":"worker.1084a3c7.map","sourceRoot":"../../src/frontend","sourcesContent":["onmessage = function(e: MessageEvent) {\n    switch(e.data.action) {\n        case 'exec': {\n            execAction(e.data.url);\n        }\n    }\n}\n\nfunction consoleLogIfRunning(msg: string, chan: string) {\n    (postMessage as any)({\n        action: 'consoleLogIfRunning',\n        payload: {\n            msg,\n            chan,\n        }\n    });\n}\n\nfunction notifyExecEnded() {\n    (postMessage as any)({\n        action: 'execEnded',\n    });\n}\n\nfunction execAction(url: string) {\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n    })\n    .then(res => {\n        if (!res.body) {\n            // response not streamable; use it in one piece\n\n            let hasLastNewLine = true;\n            return res.text()\n                .then(text => {\n                    text.split('\\n').map(jsonline => {\n        \n                    if (jsonline.trim().length === 0) return;\n\n                    const data = JSON.parse(jsonline);\n                    const txt = JSON.parse(data.data);\n                    const lastnl = txt.lastIndexOf('\\n');\n                    hasLastNewLine = (lastnl === txt.length - 1);\n                    consoleLogIfRunning(txt, data.chan);\n                    });\n\n                    return { hasLastNewLine };\n                });\n        } else {\n            return new Promise((resolve, reject) => {\n                const reader = res.body.getReader();\n                const decoder = new TextDecoder(\"utf-8\");\n                let hasLastNewLine = true;\n                const pump = () => {\n                    reader.read().then(({ done, value }) => {\n                        if (done) {\n                            resolve({ hasLastNewLine });\n                            return;\n                        }\n            \n                        decoder.decode(value).split('\\n').map(jsonline => {\n            \n                            if (jsonline.trim().length === 0) return;\n\n                            const data = JSON.parse(jsonline);\n                            const txt = JSON.parse(data.data);\n                            const lastnl = txt.lastIndexOf('\\n');\n                            hasLastNewLine = (lastnl === txt.length - 1);\n                            consoleLogIfRunning(txt, data.chan);\n                        });\n                        \n                        // Get the data and send it to the browser via the controller\n                        pump();\n                    });\n                }\n\n                pump();\n            });\n        }\n    })\n    .then(({ hasLastNewLine }) => {\n        if (!hasLastNewLine) {\n            consoleLogIfRunning('%\\n', 'forcednl');\n        }\n\n        consoleLogIfRunning('--- Done.\\n\\n', 'info');\n        notifyExecEnded();\n    })\n    .catch(err => {\n        consoleLogIfRunning('\\n--- An error occurred during execution.\\n\\n', 'stderr');\n        notifyExecEnded();\n    });\n}"]}